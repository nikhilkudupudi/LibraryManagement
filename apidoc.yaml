openapi: 3.0.3
info:
  title: Library Api - OpenAPI 3.0
  description: |-
    This is a sample Library Management Server based on the OpenAPI 3.0 specification.
  version: 0.0.0
servers:
  - url: http://localhost:3000/
tags:
  - name: books
    description: Everything about your Books
  - name: users
    description: Users
  - name: loans
    description: Loans
  - name: publishers
    description: about publishers
    
  
paths:
#users group
  /users:
    post:
      tags:
        - users
      summary: Add a new users
      description: Add a new user
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserBody"
        "405":
          description: Invalid input
    get:
      tags:
        - users
      summary: Get all users
      description: Get all users
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result set
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GetUserBody"
  /user/{username}:
    get:
      tags:
        - users
      summary: Get a user by username
      description: Get a user by  username
      operationId: getUserById
      parameters:
        - name: username
          in: path
          description: username of user to return
          required: true
          schema:
            type: string
            
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserBody"
        "404":
          description: User not found
    post:
      tags:
        - users
      summary: Update a user by username
      description: Update a user by username
      operationId: updateUserByusername
      parameters:
        - name: username
          in: path
          description: username of user to return
          required: true
          schema:
            type: string
            
      requestBody:
        description: Update a user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserBody"
        "404":
          description: User not found
        "405":
          description: Invalid input
  /user/{id}/delete:
    post:
      tags:
        - users
      summary: Delete a user by username
      description: Delete a user by username
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: username of user to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserBody"
        "404":
          description: User not found
#Loans group:
  /loans:
    post:
      tags:
        - loans
      requestBody:
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLoan"
        required: true
      responses:
        '200':
          description: add loan for user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLoan"
    get:
      tags:
        - loans
      responses:
        '200':
          description: get all loans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Loans"
  /loan/{id}:
    post:
      security:
        - adminToken: []
      tags: 
        - loans
      requestBody:
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLoan"
        required: true
      responses:
        '200':
          description: update the loan by loan id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Loans"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
  /loan/delete/{id}: 
    description: delete the loan by loan id 
    delete:
      tags: 
        - loans
      responses:
        '200':
          description: update the loan by loan id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Loans"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
#Books group
  /books:
    description: books 
    post:
      tags:
        - books
      requestBody:
        content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBook"
        required: true
      responses:
        '200':
          description: add a new book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
    get:
      tags:
        - books
      responses:
        '200':
          description: get all books 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Books'
        default:
          description: Everything else response
          content:
            text/plain:
              schema:
                type: string
                default: "there is something wrong"
  /books/{id}:
    description: get book by id
    get:
      tags:
        - books
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer

      
  /books/{genre}: 
    description: get books by genre
    get:
      tags:
        - books
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Books"
      parameters:
        - name: genre
          in: path
          required: true
          schema:
            type: string
          
  /books/{author}:
    description: get books by author
    get:
      tags:
        - books
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Books"
      parameters:
        - name: author
          in: path
          required: true
          schema:
            type: string
          
  /books/delete/{id}:
    description: delete the book
    delete:
      tags:
        - books
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Books"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
#publishers group
  /publishers:
    description: about publishers
    post:
      tags:
        - publishers
      description: add publisher
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Publishers"
    get:
      tags:
        - publishers
      description: get all Publishers
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Publishers"
  /publishers/{id}:
    get:
      security:
        - stafftoken: []
      
      tags:
        - publishers
      description: get publisher details by id
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Publishers"
      parameters:
        - name: id
          in: path
          description: id of publisher
          content:
            application/json:
              schema:
                type: integer
          required: true

  /publishers/delete/{id}:
    delete:
      tags:
        - publishers
      description: get publisher details by id
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Publishers"
      parameters:
        - name: id
          in: path
          description: id of publisher
          content:
            application/json:
              schema:
                type: integer
          required: true



            

        




          
    

components:
  schemas:
#Users group
    SanitizedUserFields:
      type: object
      properties:
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
    UserBody:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        role:
          type: string
          enum: ["student", "staff", "admin"]
        address:
          type: string

    CreateUserBody:
      allOf:
        - $ref: "#/components/schemas/UserBody"
        - $ref: "#/components/schemas/SanitizedUserFields"
    GetUserBody:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
        - $ref: "#/components/schemas/UserBody"
        - type: object
          properties:
            isActive:
              type: boolean
              default: true
              example: true
#Loans  group            
    Loans:
      type: object
      properties:
          id:
            type: integer
          bookid: 
            type: integer
            format: int32
          title: 
            type: string
            format: int64
          authorname:
            type: string
          date:
            type: string
          period:
            type: integer
          isActive:
            type: boolean
            default: false
      required:
        - id
        - bookid
        - date
        
    CreateLoan:
      type: object
      description: Creates loan for user
      properties:
        username:
          type: string
          example: "nk123"
        email:
          type: string
        role:
          type: string
          enum: ["student","staff","admin"]
        books:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Loans"
    
    
#books group
    CreateBook:
      type: object
      properties:
        title:
          type: string
        authorname:
          type: string
        description:
          type: string
        isbn:
          type: integer
        edition:
          type: string
        genre:
          type: array
        num_of_pages:
          type: integer
     
        
    Books:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        title:
          type: string
        authorname:
          type: string
        description:
          type: string
        isbn:
          type: integer
        edition:
          type: string
        genre:
          type: string
        num_of_pages:
          type: integer
        
        
      required:
        - id
        - isbn
  
#publishers group:
    Publishers:
      description: publishers  schema
      type: object
      properties:
        id:
          type: integer
          format: int64
        name: 
          type: string
        email:
          type: string
        password:
          type: string
        books:
          type: array
          items:
            $ref: "#/components/schemas/Books"
        phone: 
          type: string
      required:
        - id
        - email
        - password
  securitySchemes:
    # petstore_auth:
    #   type: oauth2
    #   flows:
    #     implicit:
    #       authorizationUrl: https://petstore3.swagger.io/oauth/authorize
    #       scopes:
    #         write:pets: modify pets in your account
    #         read:pets: read your pets
    adminToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
    stafftoken:
      type: openIdConnect
      openIdConnectUrl: https://petstore3.swagger.io/oauth/authorize
    api_key:
      type: apiKey
      name: api_key
      in: header
